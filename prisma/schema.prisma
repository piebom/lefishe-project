// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vangst {
  id          String     @id @default(cuid())
  date        DateTime?
  description String?
  weight      Float
  imageURL    String
  userId      String
  aas         String     @default("")
  locatieId   String     @default("")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  locatie     Locatie    @relation(fields: [locatieId], references: [id], onDelete: Cascade)
  Favorite    Favorite[]
}

model Favorite {
  id       String @id @default(cuid())
  userId   String
  vangstId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  vangst   Vangst @relation(fields: [vangstId], references: [id], onDelete: Cascade)
}

model Locatie {
  id      String  @id @default(cuid())
  Locatie String?

  Vangst Vangst[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?

  accounts Account[]
  sessions Session[]
  Vangst   Vangst[]
  Favorite Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
